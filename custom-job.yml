apiVersion: automation.cloudbees.io/v1alpha1
kind: CustomJob
name: manual approval
description: Request manual approval from users and teams

inputs:
  approvers:
    description: Comma separated list of approvers. Can be users or teams. If not specified, then all users who have execute permission for approval on the workflow can approve.
    required: false
  instruction:
    description: Text to display in the approval prompt
    required: false
  disallowLaunchByUser:
    description: For separation of responsibilities, if true, then the user who launched the workflow is not allowed to approve.
    default: false
    required: false
  notifyEligibleUsers:
    description: If true, then all users who are eligible to approve will be notified.
    default: false
    required: false
  debug:
    description: Set to true to enable debug logging.
    default: false
    required: false

handlers:
  init:
    uses: docker://alpine/curl:latest
    command: /bin/sh
    args: |
      -c """

        # curl --fail-with-body -X 'POST' \"$URL/v1/workflows/artifact\" -H \"Authorization: Bearer ${API_TOKEN}\" -H 'Content-Type: application/json' -H 'Accept: application/json' \
        #   --data-binary '{\"stepId\": \"$STEP_ID\", \"evidence\": {\"value\": \"debugging the issue\", \"format\": \"FORMAT_UNSPECIFIED\"}}'
      
        # curl -v --max-time 150 -X 'GET' \"$URL/v1/api-tokens\" \
        # -H \"Authorization: Bearer ${API_TOKEN}\" -H 'Content-Type: application/json' -H 'Accept: application/json'

        # Run without a token 
        curl -v --max-time 150 -X 'GET' \"$URL/v1/api-tokens\" \
        -H 'Content-Type: application/json' -H 'Accept: application/json'
      
      """
    env:
      APPROVERS: ${{inputs.approvers}}
      INSTRUCTION: ${{inputs.instruction}}
      DISALLOW_LAUNCHED_BY_USER: ${{inputs.disallowLaunchByUser}}
      NOTIFY_ELIGIBLE_USERS: ${{inputs.notifyEligibleUsers}}
      API_TOKEN: ${{ cloudbees.api.token }}
      URL: ${{ cloudbees.api.url }}
      DEBUG: ${{ inputs.debug }}

  callback:
    uses: docker://esolang/jq:latest
    command: /bin/sh
    args: |
      -c """
      
      if [ "x$DEBUG" == "xtrue" ]; 
      then
        echo \"DEBUG: `date` - Inside callback handler\"
        echo \"DEBUG: `date` - Incoming payload: '$PAYLOAD'\"
      fi
      
      # Extract approved and comments fields from the payload in JSON format
      APPROVAL_STATUS=$(echo \"$PAYLOAD\" | /usr/bin/jq -r '.status')
      COMMENTS=$(echo \"$PAYLOAD\" | /usr/bin/jq -r '.comments')
      RESPONDED_ON=$(echo \"$PAYLOAD\" | /usr/bin/jq -r '.respondedOn')
      APPROVER_USER_NAME=$(echo \"$PAYLOAD\" | /usr/bin/jq -r '.userName')

      # To avoid issue 'argument list too long' use file
      echo \"$PAYLOAD\" > /tmp/content.json
      
      # Make Platform API call to change workflow manual approval status
      response=$(curl -s --max-time 150 -w \"Exit code: %{exitcode} HTTP status: %{response_code} Error: %{errormsg}\" --fail-with-body  -X POST \"$URL/v1/workflows/approval/status\" -H \"Authorization: Bearer $API_TOKEN\" -H 'Content-Type: application/json' --data-binary \"@/tmp/content.json\") || command_failed=1
      
      # Check curl exit code
      if [ ${command_failed:-0} -eq 1 ];
      then
        echo \"ERROR: `date` - API call failed with error: '$response'\"

        # Save failure
        echo '{    
          \"status\": \"FAILED\",
          \"message\": \"Failed to change workflow manual approval status with error: '$response'\"
        }' > $CLOUDBEES_STATUS
      
        exit 1
      fi

      # Save success
      if [ "$APPROVAL_STATUS" == "UPDATE_MANUAL_APPROVAL_STATUS_APPROVED" ]; 
      then
        JOB_STATUS="APPROVED"
        echo \"Approved by $APPROVER_USER_NAME on $RESPONDED_ON with comments:\"
      elif [ "$APPROVAL_STATUS" == "UPDATE_MANUAL_APPROVAL_STATUS_REJECTED" ];
      then
        JOB_STATUS="REJECTED"
        echo \"Rejected by $APPROVER_USER_NAME on $RESPONDED_ON with comments:\"
      else
        echo \"ERROR: `date` - Unexpected approval status '$APPROVAL_STATUS'\"
        echo '{    
          \"status\": \"FAILED\",
          \"message\": \"Unexpected approval status encountered: '$APPROVAL_STATUS'\"
        }' > $CLOUDBEES_STATUS
      
        exit 1
      fi
      echo \"$COMMENTS\"
      
      echo '{    
        \"status\": '\\\"$JOB_STATUS\\\"',
        \"message\": \"Successfully changed workflow manual approval status\"
      }' > $CLOUDBEES_STATUS
      
      if [ "x$DEBUG" == "xtrue" ]; 
      then
        echo \"DEBUG: `date` - Done callback handler\"
      fi
      """
    env:
      API_TOKEN: ${{ cloudbees.api.token }}
      URL: ${{ cloudbees.api.url }}
      PAYLOAD: ${{ handler.payload }}
      DEBUG: ${{ inputs.debug }}

  cancel:
    uses: docker://alpine/curl:latest
    command: /bin/sh
    #to abort pending approval request in case of timeout or workflow abort event.
    args: |
      -c "
      if [ "x$DEBUG" == "xtrue" ]; 
      then
        echo \"DEBUG: `date` - Inside cancel handler\"
      fi
      # Make Platform API call to change workflow manual approval status
      response=$(curl -s --max-time 150 -w \"Exit code: %{exitcode} HTTP status: %{response_code} Error: %{errormsg}\" --fail-with-body  -X POST \"$URL/v1/workflows/approval/status\" -H \"Authorization: Bearer $API_TOKEN\" -H 'Content-Type: application/json' -d '{\"status\": \"$CANCELLATION_REASON\"}') || command_failed=1
      
      # Check curl exit code
      if [ ${command_failed:-0} -eq 1 ];
      then
        echo \"ERROR: `date` - API call failed with error: '$response'\"
      fi
      if [ "x$DEBUG" == "xtrue" ]; 
      then
        echo \"DEBUG: `date` - Done cancel handler\"
      fi
      "
    env:
      API_TOKEN: ${{ cloudbees.api.token }}
      URL: ${{ cloudbees.api.url }}
      CANCELLATION_REASON: ${{ handler.reason }}
      DEBUG: ${{ inputs.debug }}
